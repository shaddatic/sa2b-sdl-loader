/*
*   SAMT for Sonic Adventure 2 (PC, 2012) - '/config.h'
*
*   Description:
*     For loading, reading, modifying, & saving '.ini' configuration files. The
*   most common use is reading user-config files generated by the Mod Manager.
*/
#ifndef H_SAMT_CONFIG
#define H_SAMT_CONFIG

EXTERN_START

/************************/
/*  Opaque Types        */
/************************/
/****** MSVC stdio ******************************************************************/
typedef struct _iobuf               FILE; /* msvc std file type                     */

/****** Config **********************************************************************/
typedef struct mt_config            mt_config;       /* config header               */
typedef struct mt_config_sect       mt_config_sect;  /* config section              */
typedef struct mt_config_entry      mt_config_entry; /* config entry                */

/************************/
/*  Prototypes          */
/************************/
/************************************************************************************/
/*
*   Create/Open/Save/Close
*/
/****** Create **********************************************************************/
/*
*   Description:
*     Create a new, blank config with optional default file path.
*
*   Notes:
*     - If no default path is given, using 'mtConfigSave' on this config will
*       always fail.
*
*   Parameters:
*     - puOptPath   : optional default file path                [optional: nullptr]
*
*   Returns:
*     New, empty config structure.
*/
mt_config* mtConfigCreate( const c8* puOptPath );

/****** Open ************************************************************************/
/*
*   Description:
*     Open an existing config file (.ini) and populate a new config structure with
*   its contents.
*
*   Parameters:
*     - puPath      : path to ini file
*
*   Returns:
*     Config structure populated with contents of opened ini file. Or an empty
*   config structure if no file was found.
*/
mt_config* mtConfigOpen( const c8* puPath );
/*
*   Description:
*     Open an existing config file (.ini) and populate a new config structure with
*   its contents, with 2 path parameters.
*
*   Examples:
*     - mtConfigOpen2( mtGetModPath(), "config.ini" );
*
*   Parameters:
*     - puPath      : path to ini directory
*     - puName      : name of ini file
*
*   Returns:
*     Config structure populated with contents of opened ini file.
*/
mt_config* mtConfigOpen2( const c8* puPath, const c8* puName );

/****** Save ************************************************************************/
/*
*   Description:
*     Save config structure to its default file path. Usually the file it was
*   opened from when using 'mtConfigOpen'.
*
*   Notes:
*     - Config structures that have no default path will cause this function to
*       fail. In these cases, use 'mtConfigSaveAs' instead.
*     - If no modifications to the config structure have been made since opening,
*       this internally will do nothing.
*
*   Parameters:
*     - pConfig     : config structure
*
*   Returns:
*     'true' if the file was successfully saved, or there were no changes to save;
*   or 'false' on failure.
*/
bool    mtConfigSave( const mt_config* pConfig );
/*
*   Description:
*     Save config structure to an arbitrary file path.
*
*   Notes:
*     - If no modifications to the config structure have been made since opening,
*       this internally will do nothing.
*
*   Parameters:
*     - pConfig     : config structure
*     - puPath      : file path to save to
*
*   Returns:
*     'true' if the file was successfully saved, or there were no changes to save;
*   or 'false' on failure.
*/
bool    mtConfigSaveAs( const mt_config* pConfig, const c8* puPath );

/****** Close ***********************************************************************/
/*
*   Description:
*     Close a config structure and save it to file (if needed), releasing all data
*   contained within it. If the structure was not modified, or has no default path,
*   this is functionally the same as 'mtConfigFree'.
*
*   Notes:
*     - Be aware that any string pointers retrieved from the config structure will
*       become invalid upon calling this. Ensure to make copies of strings you wish
*       to continue using.
*
*   Parameters:
*     - pConfig     : config structure
*/
void    mtConfigClose( mt_config* pConfig );

/************************************************************************************/
/*
*   Basic Controls
*/
/****** Get *************************************************************************/
/*
*   Description:
*     Get raw string value from a config entry. If the entry does not exist, the
*   passed in default string pointer will be returned.
*
*   Notes:
*     - The string returned is the raw string contained in the file. This means
*       escape sequences like "\r" and "\\" are NOT converted into the '\r' and '\'
*       characters. You will have to do this manually.
*
*   Parameters:
*    - pConfig      : config structure
*    - puSect       : config section name
*    - puEntry      : config entry name
*    - def          : default return value
*
*   Returns:
*     String contained in the config entry; or 'def' value if the entry does not
*   exist.
*/
const c8* mtConfigGetString( const mt_config* pConfig, const c8* puSect, const c8* puEntry, const c8* def );
/*
*   Description:
*     Get integer value from a config entry. Each function controls how the stored
*   raw string is interpreted into an integer.
*
*   Notes:
*     - Int -> "99" == ' 99' // string == ret value
*     - Hex -> "FF" == '255' // string == ret value
*     - Oct -> "77" == ' 63' // string == ret value
*
*   Parameters:
*    - pConfig      : config structure
*    - puSect       : config section name
*    - puEntry      : config entry name
*    - def          : default return value
*
*   Returns:
*     Integer value contained in the config entry; or 'def' value if the entry
*   does not exist.
*/
s32     mtConfigGetInt( const mt_config* pConfig, const c8* puSect, const c8* puEntry, s32 def );
u32     mtConfigGetHex( const mt_config* pConfig, const c8* puSect, const c8* puEntry, u32 def );
s32     mtConfigGetOct( const mt_config* pConfig, const c8* puSect, const c8* puEntry, s32 def );
/*
*   Description:
*     Get float value from a config entry.
*
*   Parameters:
*    - pConfig      : config structure
*    - puSect       : config section name
*    - puEntry      : config entry name
*    - def          : default return value
*
*   Returns:
*     Float value contained in the config entry; or 'def' value if the entry does
*   not exist.
*/
f64     mtConfigGetFloat( const mt_config* pConfig, const c8* puSect, const c8* puEntry, f64 def );
/*
*   Description:
*     Get boolean value from a config entry.
*
*   Notes:
*     - "True"  == 'true'  // string == ret value
*     - "False" == 'false' // string == ret value
*
*   Parameters:
*    - pConfig      : config structure
*    - puSect       : config section name
*    - puEntry      : config entry name
*    - def          : default return value
*
*   Returns:
*     Boolean value contained in the config entry; or 'def' value if the entry does
*   not exist, or does not match either "True" or "False".
*/
bool    mtConfigGetBool( const mt_config* pConfig, const c8* puSect, const c8* puEntry, bool def );

/****** Set *************************************************************************/
/*
*   Description:
*     Set an entry's raw string value. If the entry doesn't exist, it is created.
*
*   Notes:
*     - Any escape sequences will be converted to raw character pairs. Eg:
*       - '\r' -> { '\\', 'r' }
*       - '\n' -> { '\\', 'n' }
*
*   Parameters:
*    - pConfig      : config structure
*    - puSect       : config section name
*    - puEntry      : config entry name
*    - set          : string to set
*/
void    mtConfigSetString( mt_config* pConfig, const c8* puSect, const c8* puEntry, const c8* set );
/*
*   Description:
*     Set an entry's integer value. Each function controls the format of the
*   integer when converted to a string. If the entry doesn't exist, it is created.
*
*   Notes:
*     - Int -> ' 99' == "99" // set value == string
*     - Hex -> '255' == "FF" // set value == string
*     - Oct -> ' 63' == "77" // set value == string
*
*   Parameters:
*    - pConfig      : config structure
*    - puSect       : config section name
*    - puEntry      : config entry name
*    - set          : value to set
*/
void    mtConfigSetInt( mt_config* pConfig, const c8* puSect, const c8* puEntry, s32 set );
void    mtConfigSetHex( mt_config* pConfig, const c8* puSect, const c8* puEntry, s32 set );
void    mtConfigSetOct( mt_config* pConfig, const c8* puSect, const c8* puEntry, s32 set );
/*
*   Description:
*     Set an entry's float value. If the entry doesn't exist, it is created.
*
*   Parameters:
*    - pConfig      : config structure
*    - puSect       : config section name
*    - puEntry      : config entry name
*    - set          : value to set
*/
void    mtConfigSetFloat( mt_config* pConfig, const c8* puSect, const c8* puEntry, f64 set );
/*
*   Description:
*     Set an entry's boolean value. If the entry doesn't exist, it is created.
*
*   Parameters:
*    - pConfig      : config structure
*    - puSect       : config section name
*    - puEntry      : config entry name
*    - set          : value to set
*/
void    mtConfigSetBool( mt_config* pConfig, const c8* puSect, const c8* puEntry, bool set );

/****** Remove **********************************************************************/
/*
*   Description:
*     Remove a section from a config structure, including all entries contained
*   within it. If the section doesn't exist, no action is taken.
*
*   Parameters:
*    - pConfig      : config structure
*    - puSect       : config section name
*/
void    mtConfigRemSect( mt_config* pConfig, const c8* puSect );
/*
*   Description:
*     Remove an entry from a config structure. If the entry doesn't exist, no
*   action is taken.
*
*   Parameters:
*    - pConfig      : config structure
*    - puSect       : config section name
*    - puEntry      : config entry name
*/
void    mtConfigRemEntry( mt_config* pConfig, const c8* puSect, const c8* puEntry );

/************************************************************************************/
/*
*   Advanced Controls
*/
/****** Out *************************************************************************/
/*
*   Description:
*     Print contents of a config structure to a file stream.
*
*   Notes:
*     - Internally used in the 'mtConfigSave' functions.
*
*   Parameters:
*    - pConfig      : config structure
*    - f            : file stream
*/
void    mtConfigOut( const mt_config* pConfig, FILE* f );
/*
*   Description:
*     Print contents of a config section structure to a file stream.
*
*   Parameters:
*    - pSect        : config section structure
*    - f            : file stream
*/
void    mtConfigSectOut( const mt_config_sect* pSect, FILE* f );
/*
*   Description:
*     Print contents of a config entry to a file stream.
*
*   Parameters:
*    - pEntry       : config entry
*    - f            : file stream
*/
void    mtConfigEntryOut( const mt_config_entry* pEntry, FILE* f );

/****** Header **********************************************************************/
/*
*   Description:
*     Get a config section structure from a config header.
*
*   Parameters:
*    - pConfig      : config structure
*    - puSect       : config section name
*
*   Returns:
*     Config section structure; or 'nullptr' if the section doesn't exist.
*/
mt_config_sect*  mtConfigGetSect( const mt_config* pConfig, const c8* puSect );
/*
*   Description:
*     Get a config entry from a config header.
*
*   Parameters:
*    - pConfig      : config structure
*    - puSect       : config section name
*    - puEntry      : config entry name
*
*   Returns:
*     Config entry; or 'nullptr' if the entry doesn't exist.
*/
mt_config_entry* mtConfigGetEntry( const mt_config* pConfig, const c8* puSect, const c8* puEntry );
/*
*   Description:
*     Free an entire config structure.
* 
*   Notes:
*     - Be aware that any string pointers retrieved from the config structure will
*       become invalid upon calling this. Ensure to make copies of strings you wish
*       to continue using.
*/
void    mtConfigFree( mt_config* pConfig );

/****** Section *********************************************************************/
/*
*   Description:
*     Get a config entry from a config section structure.
*
*   Parameters:
*     - pSect       : config section structure
*     - puEntry      : config entry name
*
*   Returns:
*     Config entry; or 'nullptr' if the entry doesn't exist.
*/
mt_config_entry* mtConfigSectGetEntry( const mt_config_sect* pSect, const c8* puEntry );
/*
*   Description:
*     Free a config section structure, and all entries it contains.
*
*   Parameters:
*     - pSect       : config section structure
*/
void    mtConfigSectFree( mt_config_sect* pSect );

/****** Entry ***********************************************************************/
/*
*   Description:
*     Get raw string from a config entry.
*
*   Parameters:
*     - pEntry      : config entry
*
*   Returns:
*     String the entry contains.
*/
const c8* mtConfigEntryGetString( const mt_config_entry* pEntry );
/*
*   Description:
*     Free a config entry.
*
*   Parameters:
*     - pEntry      : config entry
*/
void    mtConfigEntryFree( mt_config_entry* pEntry );

EXTERN_END

#endif/*H_SAMT_CONFIG*/
